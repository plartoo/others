[
  {
    "__comment__": "This is the common QA functions that we must always run against output files after data transformation.",
    "__comment__": "If any of the QA tests doesn't pass, we must modify the config file of the respective country to update the transformation rules as needed.",
    "__comment__": "Run this QA config from commandline like this >> python transform.py -c configs/common_post_transform_qa_config.json -i output/AED_GCC/transformed_GCC_2019FY__20200407_170849.xlsx",

    "__comment__": "(Optional) Enter sheet name to process from input Excel file. Default is the first sheet.",
    "input_sheet_name": "Sheet1",

    "__comment__": "(Optional) Enter the encoding value to obtain records from output Excel file.",
    "__comment__": "Be carefull some countries that have output enconding in their config files as Ukraine that needs to run as utf-16",
    "input_encoding": "utf-8",

    "input_delimiter": "|",

    "__comment__": "(Optional) Enter the row index (>= 0) to extract column headers from. Default is 0 (the first row).",
    "__comment__": "If this value is NOT provided, program will assume there is no header row in the input file",
    "header": 0,
    
    "__comment__": "(Optional) Enter the row numbers to get all information in order to include in one QA validation.",
    "rows_per_read": 2000000,

    "__comment__": "(Optional) Specify which row index (starting from 0) the data begins. Default is 1 (the second row) because that's where the data usually begins in files.",
    "skiprows": 1,

    "__comment__": "(Optional) Specify how many rows we should ignore at the bottom of the data file. Default is 0.",
    "skipfooter": 0,

    "__comment__": "(Optional) Boolean flag telling if we should write data to a destination place. Default is always True.",
    "write_output": false,

    "__comment__": "(Required) Path+name of the module with **COMMON** QA functions.",
    "custom_transform_functions_file": "./qa_functions/common_comp_harm_qa_functions.py",

    "__comment__": "(Required) List of the functions and their parameters.",
    "__comment__": "These functions must be defined either in transform_functions.py or individual task's transform file such as ./transform_function/aed_gcc_transform_functions.py",
    "functions_to_apply": [
      {
        "__function_comment__": "Someone might forgot to properly name the transformed output file with the correct date range.",
        "__function_comment__": "This QA function will check that the date range used in the file name is the same as that is observed in the data itself.",
        "function_name": "assert_date_range_in_file_name_is_the_same_as_what_is_in_the_data"
      },
      {
        "function_name": "check_expected_columns_are_present"
      },
      {
        "function_name": "assert_number_of_columns_equals",
        "function_args": [18]
      },
      {
        "function_name": "assert_no_null_value_in_essential_columns"
      },
      {
        "function_name": "assert_no_empty_str_value_in_essential_columns"
      },
      {
        "function_name": "check_distinct_year_values_in_year_column"
      },
      {
        "function_name": "assert_if_year_values_are_within_valid_range"
      },
      {
        "function_name": "check_distinct_month_values_in_month_column"
      },
      {
        "function_name": "assert_if_month_values_are_within_valid_range"
      },
      {
        "function_name": "assert_if_date_values_matches_with_year_and_month_column_values"
      },
      {
        "function_name": "assert_REGION_values_are_valid"
      },
      {
        "function_name": "assert_COUNTRY_values_are_valid"
      },
      {
        "function_name": "check_ADVERTISER_values_that_do_not_have_mapping"
      },
      {
        "function_name": "assert_MEDIA_TYPE_values_are_valid"
      },
      {
        "function_name": "alert_standard_MEDIA_TYPE_values_that_are_not_found_in_data"
      },
      {
        "function_name": "assert_CATEGORY_values_are_valid"
      },
      {
        "function_name": "alert_category_values_that_cannot_be_mapped_using_our_mapping_dictionary"
      },
      {
        "__comment__": "To prevent us from mapping 'Toothpaste' to 'Personal Care' for example.",
        "function_name": "assert_SUBCATEGORY_values_have_correct_1PH_CATEGORY_values_assigned"
      },
      {
        "function_name": "assert_GROSS_SPEND_column_has_no_negative_value"
      },
      {
        "function_name": "assert_GROSS_SPEND_column_has_no_ridiculously_high_spend_value"
      },
      {
        "function_name": "assert_GROSS_SPEND_column_values_have_two_decimals"
      }
    ]
  }
]
